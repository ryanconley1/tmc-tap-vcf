#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:json", "json")
#@ load("@ytt:yaml", "yaml")


#@ def defaultjson():
ca-url: #@ "https://step-ca." + data.values.base_domain
ca-config: /home/step/config/ca.json
fingerprint: #@ json.decode(data.read("config/defaults.json"))["fingerprint"]
root: /home/step/certs/root_ca.crt
#@ end

#@ def cajson():
root: /home/step/certs/root_ca.crt
federateRoots: []
crt: /home/step/certs/intermediate_ca.crt
key: /home/step/secrets/intermediate_ca_key
address: :9000
dnsNames:
  - step-ca-step-certificates.step-ca.svc.cluster.local
  - #@ "step-ca." + data.values.base_domain
logger:
  format: json
db:
  type: badgerv2
  dataSource: /home/step/db
authority:
  enableAdmin: false
  provisioners: #@ json.decode(data.read("config/ca.json"))["authority"]["provisioners"]
tls:
  cipherSuites:
    - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
    - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
  minVersion: 1.2
  maxVersion: 1.3
  renegotiation: false
#@ end

fullName:
  clusterGroupName:  #@ data.values.clusterGroupName
  name: step-ca-step-certificates-config
  namespaceName: step-ca
spec:
  atomicSpec:
    data:
      ca.json: #@ base64.encode(json.encode(cajson()))
      default.json: #@ base64.encode(json.encode(defaultjson()))
    secretType: SECRET_TYPE_OPAQUE
type:
  kind: Secret
  package: vmware.tanzu.manage.v1alpha1.clustergroup.namespace.secret
  version: v1alpha1